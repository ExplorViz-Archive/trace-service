plugins {
  id 'java'
  id 'io.quarkus'
  id 'com.adarshr.test-logger' version '3.2.0'
}

apply from: 'code-analysis/code-analysis.gradle'

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url "https://packages.confluent.io/maven/"
  }
}

sourceSets {
  integrationTest {
    java.srcDir file('src/integrationTest/java')
    compileClasspath += sourceSets.main.output
    runtimeClasspath += sourceSets.main.output
  }
}

task integrationTest(type: Test) {
  description = 'Runs integration tests.'
  group = 'verification'

  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  shouldRunAfter test
}

jacocoTestReport {
  dependsOn test

  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, exclude: [
              "**/*MapperGenerated*",
              "**/TraceMapperBuilder.*",
              "**/SpanDynamicDaoProducer.*",
              "**/TraceMapper.*",
              "**/TraceMapperProducer.*",
              "**/SerdeProducer.*",
              "**/SchemaRegistryClientProducer.*",
              "**/ShutdownHandler.*",
              "**/IgnoreRecordTooLargeHandler.*",
      ])
    }))
  }
}
jacocoTestReport.dependsOn integrationTest

check.dependsOn integrationTest

configurations {
  integrationTestImplementation.extendsFrom implementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.setCanBeResolved(true)
  integrationTestRuntimeOnly.setCanBeResolved(true)
}

sourceSets.main.java.srcDirs = ['build/classes/java/quarkus-generated-sources/avdl', 'src/main/java', 'build/generated/sources/annotationProcessor/java/main']

dependencies {  
  implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
  
  // Base
  implementation 'io.quarkus:quarkus-resteasy-reactive'
  implementation 'io.quarkus:quarkus-resteasy-reactive-jackson'
  implementation 'io.quarkus:quarkus-scheduler'
  implementation 'io.quarkus:quarkus-micrometer-registry-prometheus'

  // Container Build
  implementation 'io.quarkus:quarkus-container-image-jib'

  // Cassandra
  implementation enforcedPlatform("com.datastax.oss.quarkus:cassandra-quarkus-bom:${quarkusCassandraPlatformVersion}")  
  annotationProcessor group: 'com.datastax.oss.quarkus', name: 'cassandra-quarkus-mapper-processor', version: "${quarkusCassandraPlatformVersion}"  
  implementation group: 'com.datastax.oss', name: 'java-driver-mapper-runtime', version: "${datastaxJavaDriverVersion}"
  implementation'com.datastax.oss.quarkus:cassandra-quarkus-client'
  implementation 'com.datastax.oss:java-driver-metrics-micrometer:${datastaxJavaDriverVersion}'

  // Kafka
  implementation 'io.quarkus:quarkus-kafka-streams'

  implementation 'io.quarkus:quarkus-confluent-registry-avro'
  implementation group: 'io.confluent', name: 'kafka-avro-serializer', version: '7.2.1'
  implementation group: 'io.confluent', name: 'kafka-streams-avro-serde', version: '7.2.1'
  implementation 'io.quarkus:quarkus-smallrye-reactive-messaging-kafka'
  
  // Utility
  implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
  
  // Unit Testing  
  testImplementation 'io.quarkus:quarkus-junit5'
  testImplementation 'io.quarkus:quarkus-junit5-mockito'

  testImplementation group: 'org.apache.kafka', name: 'kafka-streams-test-utils', version: '3.3.1'
  
  // Integration / Api Tests
  testImplementation 'io.rest-assured:rest-assured'
  integrationTestImplementation 'io.rest-assured:rest-assured'
  testImplementation 'com.datastax.oss.quarkus:cassandra-quarkus-test-framework'
  integrationTestImplementation 'com.datastax.oss.quarkus:cassandra-quarkus-test-framework'
  testImplementation "org.testcontainers:kafka:1.17.5"
  integrationTestImplementation "org.testcontainers:kafka:1.17.5"

  // Integration Testing  
  integrationTestImplementation 'io.quarkus:quarkus-junit5'
  integrationTestImplementation 'org.mockito:mockito-junit-jupiter'
}

group 'net.explorviz'
version '1.0-SNAPSHOT'

compileJava {
  options.encoding = 'UTF-8'
  options.compilerArgs << '-parameters'
}

compileTestJava {
  options.encoding = 'UTF-8'
}

java {
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11
}

tasks.withType(JavaCompile) {
  // Turn on all javac warnings instead of classfile and processing, which produces many false-positives about
  // annotations and cast which is triggered by the auto-generated Dao implementations
  options.compilerArgs << "-Xlint:all" << "-Xlint:-classfile" << "-Xlint:-processing" << "-Xlint:-cast"
}

test {
  systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}

integrationTest {
  systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}
